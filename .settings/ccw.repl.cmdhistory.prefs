cmdhistory=["(use 'xml_mapper.core)" "(use 'xml_mapper.core \:reload)" "(use 'xml_mapper.core)" "(ns xml-mapper.core\\n  (\:require [clojure.xml \:as xml]))" "(defn- contains-one-string [item]\\n  (and (vector? item) (\= (count item) 1) (string? (first item))))" "\\n(defn- get-element-contents [attrs children]\\n  (cond\\n      (not attrs)        children\\n      (string? children) (merge-with (comp vec flatten vector) attrs {\:text-content children})\\n      \:else              (merge-with (comp vec flatten vector) attrs children)))" "(defn- convert-element [elem]  \\n  (let [attrs    (\:attrs elem)\\n        children (xml-to-raw (\:content elem))\\n        content  (get-element-contents attrs children)]\\n    (hash-map (keyword (\:tag elem)) content)))" "\\n(defn xml-to-raw \\n  \\"Converts Clojure parsed xml into raw Clojure data structures.\\n   Element names become keys.  \\n\\n   <root/> \=> {\:root nil} \\n\\n   Element contents become values. \\n\\n   <root>hello</root> \=> {\:root \\\\\\"hello\\\\\\"}\\n\\n   Multiple elements become a single key to a vector of values. \\n\\n   <elem>val1</elem><elem>val2</elem> \=> {\:elem [\\\\\\"val1\\\\\\",\\\\\\"val2\\\\\\"]}\\n\\n   Text content is usually just the value associated with the element.\\n   However an element has mixed text and element content, the keyword \:text-content identifies the text\\n\\n   <root>text<elem>value</elem></root> \=> {\:root {\:text-content \\\\\\"text\\\\\\" \:elem \\\\\\"value\\\\\\"}}\\n    \\n   Attributes become part of the map an element refers to\\n\\n   <root class\=\\\\\\"bold\\\\\\"/> \=> {\:root {\:class \\\\\\"bold\\\\\\"}}\\n\\n   <root class\=\\\\\\"bold\\\\\\"><elem>value</elem></root> \=> {\:root {\:class \\\\\\"bold\\\\\\" \:elem \\\\\\"value\\\\\\"}}\\n\\n   This does mean that if an element has attributes, it's text child will be in the map under the key \:text-content as with mixed text/element children.\\n\\n   Inspired by Approach \#3 here http\://www.w3.org/2011/10/integration-workshop/s/ExperienceswithJSONandXMLTransformations.v08.pdf\\n   Converting from XML to JSON focusing on 'friendliness'\\"\\n  [item]\\n  (cond\\n    (map? item) (convert-element item)\\n    (contains-one-string item) (first item)\\n    (vector? item) (convert-collection item)\\n    (string? item) {\:text-content item}))" "(defn- convert-collection\\n  \\"normally maps elements in a collection to their \\"\\n  [coll]\\n  (apply merge-with (comp vec flatten vector) (map xml-to-raw coll)))" "(use 'xml_mapper.core)" "(use 'xml-mapper.core)" "(use 'xml-mapper.core-test)" "(run-tests 'xml-mapper.core-test)" "(use 'clojure.test)" "(run-tests 'xml-mapper.core-test)" "(use 'xml-mapper.core \:reload)" "(run-tests 'xml-mapper.core-test)"]
eclipse.preferences.version=1
